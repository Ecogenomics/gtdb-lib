name: Version, build, publish

on:
  push:
    branches:
      - main

jobs:

  semantic_release_next_version:
    name: Next version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: 19
      - run: npm install
      - run: npx semantic-release --dry-run
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        with:
          name: semantic-release
          path: |
            gtdblib/__init__.py
            CHANGELOG.md
            pyproject.toml
          retention-days: 1
    outputs:
      version: ${{ steps.semantic_release.outputs.version }}

  build_docs:
    runs-on: ubuntu-latest
    needs: semantic_release_next_version
    steps:
      # Checkout the main branch to ~/main and build docs
      - uses: actions/checkout@v3
        with:
          path: main

      # Checkout the documentation branch to ~/gh-pages
      - uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages

      # Download the (maybe new) versioned files
      - uses: actions/download-artifact@v3
        with:
          name: semantic-release
          path: ${{ github.workspace }}/main/

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Sphinx requirements
        working-directory: ${{ github.workspace }}/main
        run: |
          python -m pip install -U poetry
          poetry install -E docs

      - name: Build documentation
        working-directory: ${{ github.workspace }}/main/docs
        run: |
          mkdir -p _static
          sphinx-apidoc --force -o . ../gtdblib/
          make html

      - name: Move documentation
        run: |
          touch main/docs/_build/html/.nojekyll
          cp -ar main/docs/_build/html/. ${{ github.workspace }}/gh-pages/

      - name: Upload documentation
        working-directory: ${{ github.workspace }}/gh-pages
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --all
          git diff-index --quiet HEAD || git commit -m "docs update" -a
          git push

  build_python:
    name: Python build
    runs-on: ubuntu-latest
    needs: semantic_release_next_version
    if: needs.semantic_release_next_version.outputs.version != ''
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: semantic-release
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - run: |
          python -m pip install -U poetry
          poetry build
      - uses: actions/upload-artifact@v3
        with:
          name: pypi
          path: dist/*
          retention-days: 1

  test_python_sdist:
    name: Python test *.tar.gz
    runs-on: ubuntu-latest
    needs: build_python
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: pypi
          path: dist
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - run: python -m pip install dist/*.tar.gz

  test_python_wheel:
    name: Python test *.whl
    runs-on: ubuntu-latest
    needs: build_python
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: pypi
          path: dist
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - run: python -m pip install dist/*.whl

  semantic_release_publish:
    name: Publish to GitHub
    needs: [test_python_sdist, test_python_wheel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: 19
      - run: npm install
      - run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_pypi:
    name: Publish to PyPI
    needs: [semantic_release_publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: pypi
          path: dist
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - run: |
          python -m pip install -U twine
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
